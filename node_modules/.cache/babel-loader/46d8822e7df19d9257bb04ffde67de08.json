{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from 'react';\nexport function useFetch(url) {\n  _s();\n\n  const [data, setData] = React.useState();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(false);\n\n  const fetchApi = () => {\n    setError(false);\n    setLoading(true);\n    fetch(url).then(response => response.json()).then(data => setData(data)).catch(error => {\n      console.log(error);\n      setError(true);\n    }).finally(() => setLoading(false));\n  };\n\n  React.useEffect(() => {\n    fetchApi();\n  }, []);\n  return {\n    loading,\n    error,\n    data\n  };\n}\n\n_s(useFetch, \"OUHXO5i8bxwZyndmGQhclmKzHEk=\");","map":{"version":3,"sources":["/home/erison/GitHub/typescript-rickdex/src/hooks/useFetch.ts"],"names":["React","useFetch","url","data","setData","useState","loading","setLoading","error","setError","fetchApi","fetch","then","response","json","catch","console","log","finally","useEffect"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAQA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAA+B;AAAA;;AAElC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,KAAK,CAACK,QAAN,EAAxB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,KAAK,CAACK,QAAN,CAAe,KAAf,CAA9B;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACK,QAAN,CAAe,KAAf,CAA1B;;AAEA,QAAMK,QAAQ,GAAG,MAAM;AACnBD,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,IAAAA,KAAK,CAACT,GAAD,CAAL,CACKU,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUT,IAAI,IACNC,OAAO,CAACD,IAAD,CAHf,EAKKY,KALL,CAKWP,KAAK,IAAI;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KARL,EASCS,OATD,CASS,MAAMX,UAAU,CAAC,KAAD,CATzB;AAUH,GAbD;;AAeAP,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AAClBT,IAAAA,QAAQ;AACX,GAFD,EAEG,EAFH;AAIA,SAAO;AACHJ,IAAAA,OADG;AAEHE,IAAAA,KAFG;AAGHL,IAAAA;AAHG,GAAP;AAKH;;GA9BeF,Q","sourcesContent":["import * as React from 'react';\n\nexport interface IuseFetchProps {\n    loading: Boolean\n    error: Boolean\n    data: any\n}\n\nexport function useFetch(url: string) {\n    \n    const [data, setData] = React.useState<any>()\n    const [loading, setLoading] = React.useState(false)\n    const [error, setError] = React.useState(false)\n\n    const fetchApi = () => {\n        setError(false)\n        setLoading(true)\n        fetch(url)\n            .then(response => response.json())\n            .then(data => \n                setData(data)\n            )\n            .catch(error => {\n                console.log(error)\n                setError(true)\n            })\n        .finally(() => setLoading(false))\n    }\n\n    React.useEffect(() => {\n        fetchApi();\n    }, []);\n\n    return {\n        loading,\n        error,\n        data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}